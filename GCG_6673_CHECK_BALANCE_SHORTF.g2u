Program.Sub.Preflight.Start
v.Global.bHoldThisSO.Declare(Boolean, True)
v.Global.sSO.Declare(String)
Program.Sub.Preflight.End
'ARC#6673
'Customer:DIVERSIFIED LABELING SOLUTIONS
'	Mar 2022, Nam Le


'The core system for customer ship hold effects all orders by customer which interferes with DLS
'process of being able to create WOs and Ship orders in a more streamline fashion. DLS would like the
'ship hold process to function at an order level and not at a customer level. Additionally, they have 3
'types of customers: ones that would never get put on Ship Hold, ones that always get put on ship hold
'regardless of the open balance, and ones that get put on ship hold only when they exceed their credit
'limit.

'This script works with SO Line - Short Form

'This script is attached to hook#12410 => 12620 (Order Line > Script 1 Button)
'Clicking this button will total up the customers Open AR, plus the customers Open Orders
'that are NOT on hold, and the current order they are entering, and compare that total to the
'customers credit limit. If the total is below the credit limit, the order will be taken off ship
'hold and the GEN WO button will be enabled

'passed var
'000060 ORDER_NO => 000005
'000051 LINE_ITEM 
'000061 GEN-WO-BTN => 000211
'000162 SCRIPT-1-BTN
'000093 GROSS (ORDER TOTAL) => 000155

Program.Sub.Main.Start

f.Intrinsic.Control.Try
	v.Local.sSQL.Declare(String)
	v.Local.sSO.Declare(String)
	v.Local.sRet.Declare(String)
	v.Local.sCustomer.Declare(String)
	v.Local.fOpenAR.Declare(Float)
	v.Local.fTotalSONotHold.Declare(Float)
	v.Local.fTotalCurrentSO.Declare(Float)
	v.Local.fCreditLimit.Declare(Float)
	v.Local.fBalance.Declare(Float)
	
	v.Local.sSO.Set(v.Passed.000005)
	f.Intrinsic.String.LPad(v.Local.sSO, "0", 7, v.Local.sSO)
	v.Global.sSO.Set(v.Local.sSO)

	
'	f.Intrinsic.UI.Msgbox("Balance is Positive. Release from Ship Hold.")
'	f.Intrinsic.UI.Msgbox("Balance is Negative. Continue to Hold.")
	f.Intrinsic.UI.Msgbox("This Customer is Always Hold type.", "Cannot Release")
'	f.Intrinsic.UI.Msgbox("This Customer has no Credit Limit Amount.", "Cannot Release")
	
	
	f.ODBC.Connection!Con.OpenCompanyConnection

	
	'Get Customer, Open AR, Order Total and Credit Limit
	'--------------------------------------------------------------------------------
	'get Customer
	f.Intrinsic.String.Build("select RTRIM(CUSTOMER) from V_ORDER_HEADER where RTRIM(ORDER_NO)='{0}'", v.Local.sSO, v.Local.sSQL)
	f.ODBC.Connection!Con.ExecuteAndReturn(v.Local.sSQL, v.Local.sRet)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF, =, False)
		v.Local.sCustomer.Set(v.Local.sRet)
	f.Intrinsic.Control.Else
		f.ODBC.Connection!Con.Close
		f.Intrinsic.Control.End
	f.Intrinsic.Control.EndIf
	
	'if always hold => hold
	'-------------------------
	f.Intrinsic.String.Build("select RTRIM(HOLD_TYPE) from GCG_6673_CUSTHOLD where RTRIM(CUSTOMER)='{0}'", v.Local.sCustomer, v.Local.sSQL)
	v.Local.sRet.Set("")
	f.ODBC.Connection!Con.ExecuteAndReturn(v.Local.sSQL, v.Local.sRet)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF,=,True, "or", v.Local.sRet,!=,"Limit Hold")
		f.Intrinsic.UI.Msgbox("This Customer is Always Hold type.", "Cannot Release")
		f.ODBC.Connection!Con.Close
		f.Intrinsic.Control.End
	f.Intrinsic.Control.EndIf
	'-------------------------
	
	'Credit limit
	f.Intrinsic.String.Build("select CL.CREDIT_AMOUNT from V_AR_CREDIT_LIMIT CL left join V_CUSTOMER_MASTER CM on CM.CREDIT = CL.CREDIT_CODE where RTRIM(CM.CUSTOMER)='{0}'", v.Local.sCustomer, v.Local.sSQL)
	v.Local.sRet.Set("")
	f.ODBC.Connection!Con.ExecuteAndReturn(v.Local.sSQL, v.Local.sRet)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF,=,True)
		v.Local.fCreditLimit.Set(0)
		v.Global.bHoldThisSO.Set(True)
		f.Intrinsic.UI.Msgbox("This Customer has no Credit Limit Amount.", "Cannot Release")
		'if no limit set => always hold
		f.ODBC.Connection!Con.Close
		f.Intrinsic.Control.End
	f.Intrinsic.Control.Else
		v.Local.fCreditLimit.Set(v.Local.sRet)
	f.Intrinsic.Control.EndIf
	
	'get Customer Open AR
	f.Intrinsic.String.Build("select SUM(AMT_INVOICE) from AR_OPEN_ITEMS where RTRIM(CUSTOMER)='{0}'", v.Local.sCustomer, v.Local.sSQL)
	v.Local.sRet.Set("")
	f.ODBC.Connection!Con.ExecuteAndReturn(v.Local.sSQL, v.Local.sRet)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF,=,True)
		v.Local.fOpenAR.Set(0)
	f.Intrinsic.Control.Else
		v.Local.fOpenAR.Set(v.Local.sRet)
	f.Intrinsic.Control.EndIf
	
	'Open orders, minus the current order
	f.Intrinsic.String.Build("select SUM(L.QTY_ORDERED*L.PRICE) from V_ORDER_LINES L where RTRIM(L.CUSTOMER)='{0}' and RTRIM(ORDER_NO)<>'{1}' and RTRIM(ORDER_NO) in (select RTRIM(REF.ORDER_NO) from V_ORDER_HEADER REF where RTRIM(REF.CUSTOMER)='{0}' and SHP_HLD_FLAG in ('0','1','3'))", v.Local.sCustomer, v.Local.sSO, v.Local.sSQL)
	f.Intrinsic.String.Build("select SUM(L.QTY_ORDERED*L.PRICE) from V_ORDER_LINES L where RTRIM(L.CUSTOMER)='{0}' and RTRIM(ORDER_NO)<>'{1}' and RTRIM(ORDER_NO) in (select RTRIM(REF.ORDER_NO) from V_ORDER_HEADER REF where RTRIM(REF.CUSTOMER)='{0}')", v.Local.sCustomer, v.Local.sSO, v.Local.sSQL)
	v.Local.sRet.Set("")
	f.ODBC.Connection!Con.ExecuteAndReturn(v.Local.sSQL, v.Local.sRet)
	f.ODBC.Connection!Con.Close
	
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF,=,True)
		v.Local.fTotalSONotHold.Set(0)
	f.Intrinsic.Control.Else
		v.Local.fTotalSONotHold.Set(v.Local.sRet)
	f.Intrinsic.Control.EndIf
	
	'Current Order
	v.Local.fTotalCurrentSO.Set(v.Passed.000155)
	
	'Calculate balance
	f.Intrinsic.Math.Sub(v.Local.fCreditLimit,v.Local.fOpenAR,v.Local.fTotalSONotHold,v.Local.fTotalCurrentSO,v.Local.fBalance)
	f.Intrinsic.Control.If(v.Local.fBalance,>,0)
		v.Global.bHoldThisSO.Set(False)
		f.Intrinsic.Control.CallSub(UnholdThisSO)
		f.Intrinsic.UI.Msgbox("Balance is Positive. Release from Ship Hold.")
	f.Intrinsic.Control.Else
		v.Global.bHoldThisSO.Set(True)
		f.Intrinsic.UI.Msgbox("Balance is Negative. Continue to Hold.")
		
		'continue to lock, exit
'		f.ODBC.Connection!Con.Close
		f.Intrinsic.Control.End
	f.Intrinsic.Control.EndIf
	'--------------------------------------------------------------------------------

	
f.Intrinsic.Control.Catch
	f.Intrinsic.UI.Msgbox(v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Main.End


'Unhold current SO
Program.Sub.UnholdThisSO.Start
f.Intrinsic.Control.Try
	v.Local.sSQL.Declare(String)
	v.Local.sCust.Declare(String) 
	v.Local.sRet.Declare(String)
	
	f.ODBC.Connection!Con.OpenCompanyConnection
		f.Intrinsic.String.Build("update GCG_6673_SO_HOLD set SHP_HLD_FLAG='3' where RTRIM(ORDER_NO)='{0}'", v.Global.sSO, v.Local.sSQL)
		f.ODBC.Connection!Con.Execute(v.Local.sSQL)
		
		'Feb 2023 - also release in ORDER_HEADER
		f.Intrinsic.String.Build("update ORDER_HEADER set SHP_HLD_FLAG='3' where RTRIM(ORDER_NO)='{0}'", v.Global.sSO, v.Local.sSQL)
		f.ODBC.Connection!Con.Execute(v.Local.sSQL)
		
		f.Intrinsic.UI.ChangeCallerProperty(v.Passed.000211, "LOCK", 0)
		
		'Feb 13, 2023 
		'- after unhold, also update the current total so that the order wont be switched back to hold in the dashboard 6673
		'----------------------------------------------
		'find TOTAL_AMT
		f.Intrinsic.String.Build("select SUM(QTY_ORDERED*PRICE) from V_ORDER_LINES where RTRIM(ORDER_NO)='{0}'", v.Global.sSO, v.Local.sSQL)
		v.Local.sRet.Set("")
		f.ODBC.Connection!Con.ExecuteAndReturn(v.Local.sSQL, v.Local.sRet)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF)
			v.Local.sRet.Set(0)
		f.Intrinsic.Control.EndIf
		
		f.Intrinsic.String.Build("select RTRIM(CUSTOMER) from V_ORDER_HEADER where RTRIM(ORDER_NO)='{0}'", v.Global.sSO, v.Local.sSQL)
		f.ODBC.Connection!Con.ExecuteAndReturn(v.Local.sSQL, v.Local.sCust)
		
		'delete old record and insert new
		f.Intrinsic.String.Build("delete from GCG_6673_CRR_SO where RTRIM(GSSUSER)='{0}'", v.Caller.User, v.Local.sSQL)
		f.ODBC.Connection!Con.Execute(v.Local.sSQL)
		
		f.Intrinsic.String.Build("insert into GCG_6673_CRR_SO (ORDER_NO, CUSTOMER, TOTAL_AMT, GSSUSER) values('{0}','{1}',{2},'{3}')", v.Global.sSO, v.Local.sCust, v.Local.sRet, v.Caller.User, v.Local.sSQL)
		f.ODBC.Connection!Con.Execute(v.Local.sSQL)
		'----------------------------------------------
		
		
	f.ODBC.Connection!Con.Close
	
	
f.Intrinsic.Control.Catch
	f.Intrinsic.UI.Msgbox(v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.UnholdThisSO.End

Program.Sub.Comments.Start
${$5$}$2.0.0.0$}$2
${$6$}$nle$}$20230221121143970$}$kjzCRYkA6UEoRnCwndYnRSjyVXnS1VGFxxzv9TaBguAMaqSpLnFFnehg5mJ8k6UD
Program.Sub.Comments.End